// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TerraiOS
import BackgroundTasks
import Combine
import CoreLocation
import CoreNFC
import Foundation
import HealthKit
import Swift
import SwiftUI
@_exported import TerraiOS
import UIKit
import _Concurrency
final public class LibreProActivator {
  public init(tag: CoreNFC.NFCISO15693Tag, rawData: [Swift.UInt8])
  @objc deinit
}
extension TerraiOS.LibreProActivator {
  
  #if compiler(>=5.3) && $AsyncAwait
  final public func activate() async
  #endif

}
extension Swift.String {
  public var tobytes: Foundation.Data {
    get
  }
}
@_hasMissingDesignatedInitializers final public class LibreProDataParser {
  final public var glucoseData: [Swift.UInt16]
  final public var age: Swift.Int
  @objc deinit
}
extension TerraiOS.LibreProDataParser {
  public struct CalibrationInfo {
  }
}
extension Foundation.Data {
  public func bitread(_ offset: Swift.Int, _ bitOffset: Swift.Int, _ bitCount: Swift.Int) -> Swift.Int
}
public struct FSLSensorDetails : Swift.Codable {
  public var sensor_state: Swift.String
  public var status: Swift.String
  public var serial_number: Swift.String
  public var data: TerraiOS.TerraGlucoseData
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
@available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public class LibreManager {
  public init(devId: Swift.String, _ unlockCode: Swift.Int? = 0xA4, _ password: Foundation.Data? = Data([0xc2, 0xad, 0x75, 0x21]))
  public func getGlucoseData(completion: @escaping (TerraiOS.FSLSensorDetails) -> Swift.Void)
  public func activateSensor(completion: @escaping (Swift.Bool) -> Swift.Void) throws
  @objc deinit
}
public class Terra {
  public var authResponseApple: TerraiOS.TerraAuthResponse?
  public var authResponseFSL: TerraiOS.TerraAuthResponse?
  public init(devId: Swift.String, referenceId: Swift.String? = nil, bodyTimer: Swift.Double = 60*60*8, dailyTimer: Swift.Double = 60*60*8, nutritionTimer: Swift.Double = 60*60*8, sleepTimer: Swift.Double = 60*60*8)
  public func initConnection(type: TerraiOS.Connections, token: Swift.String, permissions: Swift.Set<TerraiOS.Permissions> = Set([Permissions.NUTRITION, Permissions.ACTIVITY, Permissions.ATHLETE, Permissions.SLEEP, Permissions.BODY, Permissions.DAILY]), customReadTypes: Swift.Set<HealthKit.HKObjectType> = Set([]), writePermissions: Swift.Set<TerraiOS.Permissions> = Set([]), schedulerOn: Swift.Bool = true, completion: @escaping (Swift.Bool) -> Swift.Void = {(success) -> Void in})
  public func getUserid(type: TerraiOS.Connections) -> Swift.String?
  public func checkAuthentication(connection: TerraiOS.Connections) -> Swift.Bool
  public func readGlucoseData(completion: @escaping (TerraiOS.FSLSensorDetails?) -> Swift.Void = {_ in })
  public func activateSensor(completion: @escaping (TerraiOS.FSLSensorDetails?) -> Swift.Void = {_ in })
  public func postNutrition(type: TerraiOS.Connections, payload: TerraiOS.TerraNutritionData, completion: @escaping (Swift.Bool) -> Swift.Void = {success -> Void in })
  public func postBody(type: TerraiOS.Connections, payload: TerraiOS.TerraBodyData, completion: @escaping (Swift.Bool) -> Swift.Void = {success -> Void in})
  public func getAthlete(type: TerraiOS.Connections, completion: @escaping (Swift.Bool, TerraiOS.TerraAthleteData?) -> Swift.Void = {(success, _) -> Void in })
  public func getDaily(type: TerraiOS.Connections, startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, completion: @escaping (Swift.Bool, [TerraiOS.TerraDailyData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getDaily(type: TerraiOS.Connections, startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraDailyData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getSleep(type: TerraiOS.Connections, startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, completion: @escaping (Swift.Bool, [TerraiOS.TerraSleepData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getSleep(type: TerraiOS.Connections, startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraSleepData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getBody(type: TerraiOS.Connections, startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, completion: @escaping (Swift.Bool, [TerraiOS.TerraBodyData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getBody(type: TerraiOS.Connections, startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraBodyData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getNutrition(type: TerraiOS.Connections, startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, completion: @escaping (Swift.Bool, [TerraiOS.TerraNutritionData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getNutrition(type: TerraiOS.Connections, startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraNutritionData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getActivity(type: TerraiOS.Connections, startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, completion: @escaping (Swift.Bool, [TerraiOS.TerraActivityData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getActivity(type: TerraiOS.Connections, startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraActivityData]?) -> Swift.Void = {(success, _) -> Void in})
  public func disconnectTerra(devId: Swift.String, xAPIKey: Swift.String, userId: Swift.String)
  @objc deinit
}
public enum LibreSensorState {
  case notYetStarted
  case starting
  case ready
  case expired
  case shutdown
  case failure
  case unknown
  case end
  public static func == (a: TerraiOS.LibreSensorState, b: TerraiOS.LibreSensorState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TerraStressData : Swift.Decodable {
  public var medium_stress_duration: Swift.Double?
  public var low_stress_duration: Swift.Double?
  public var avg_stress_level: Swift.Double?
  public var activity_stress_duration: Swift.Double?
  public var rest_stress_duration: Swift.Double?
  public var stress_duration: Swift.Double?
  public var max_stress_level: Swift.Double?
  public var high_stress_duration: Swift.Double?
  public var samples: [TerraiOS.StressSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMETData : Swift.Decodable {
  public var num_moderate_intensity_minutes: Swift.Double?
  public var num_low_intensity_minutes: Swift.Double?
  public var avg_level: Swift.Double?
  public var samples: [TerraiOS.METSample]?
  public var num_high_intensity_minutes: Swift.Double?
  public var num_inactive_minutes: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraHeartRateSummaryData : Swift.Decodable {
  public init(user_max_hr_bpm: Swift.Double? = nil, min_hr_bpm: Swift.Double? = nil, avg_hr_variability_sdnn: Swift.Double? = nil, avg_hr_variability_rmssd: Swift.Double? = nil, avg_hr_bpm: Swift.Double? = nil, resting_hr_bpm: Swift.Double? = nil, max_hr_bpm: Swift.Double? = nil)
  public var user_max_hr_bpm: Swift.Double?
  public var min_hr_bpm: Swift.Double?
  public var avg_hr_variability_sdnn: Swift.Double?
  public var avg_hr_variability_rmssd: Swift.Double?
  public var avg_hr_bpm: Swift.Double?
  public var resting_hr_bpm: Swift.Double?
  public var max_hr_bpm: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraHeartRateDetailedData : Swift.Decodable {
  public init(hrv_samples_rmssd: [TerraiOS.HeartRatesVariabilitySampleRMSSD]? = [HeartRatesVariabilitySampleRMSSD](), hrv_samples_sdnn: [TerraiOS.HeartRatesVariabilitySampleSDNN]? = [HeartRatesVariabilitySampleSDNN](), hr_samples: [TerraiOS.HeartRateSample]? = [HeartRateSample]())
  public var hrv_samples_rmssd: [TerraiOS.HeartRatesVariabilitySampleRMSSD]?
  public var hrv_samples_sdnn: [TerraiOS.HeartRatesVariabilitySampleSDNN]?
  public var hr_samples: [TerraiOS.HeartRateSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraHeartRateData : Swift.Decodable {
  public init(summary: TerraiOS.TerraHeartRateSummaryData? = TerraHeartRateSummaryData(), detailed: TerraiOS.TerraHeartRateDetailedData? = TerraHeartRateDetailedData())
  public var summary: TerraiOS.TerraHeartRateSummaryData?
  public var detailed: TerraiOS.TerraHeartRateDetailedData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraActiveDurationsData : Swift.Decodable {
  public var activity_seconds: Swift.Double?
  public var low_intensity_seconds: Swift.Double?
  public var rest_seconds: Swift.Double?
  public var num_continuous_inactive_periods: Swift.Double?
  public var inactivity_seconds: Swift.Double?
  public var activity_levels_samples: [TerraiOS.ActivityLevelSample]?
  public var moderate_intensity_seconds: Swift.Double?
  public var vigorous_intensity_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDailyMetaData : Swift.Decodable {
  public var start_time: Swift.String?
  public var end_time: Swift.String?
  public var upload_type: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDeviceData : Swift.Decodable {
  public var software_version: Swift.String?
  public var manufacturer: Swift.String?
  public var serial_number: Swift.String?
  public var name: Swift.String?
  public var hardware_version: Swift.String?
  public var other_devices: [TerraiOS.OtherDeviceData]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraSwimmingData : Swift.Decodable {
  public var pool_length_meters: Swift.Double?
  public var num_laps: Swift.Double?
  public var num_strokes: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraElevationData : Swift.Decodable {
  public var gain_actual_meters: Swift.Double?
  public var avg_meters: Swift.Double?
  public var loss_actual_meters: Swift.Double?
  public var max_meters: Swift.Double?
  public var gain_planned_meters: Swift.Double?
  public var min_meters: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDistanceSummaryData : Swift.Decodable {
  public var floors_climbed: Swift.Double?
  public var steps: Swift.Double?
  public var distance_meters: Swift.Double?
  public var swimming: TerraiOS.TerraSwimmingData?
  public var elevation: TerraiOS.TerraElevationData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraCaloriesData : Swift.Decodable {
  public var net_intake_calories: Swift.Double?
  public var net_activity_calories: Swift.Double?
  public var BMR_calories: Swift.Double?
  public var total_burned_calories: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDailyData : Swift.Decodable {
  public var stress_data: TerraiOS.TerraStressData?
  public var metadata: TerraiOS.TerraDailyMetaData?
  public var MET_data: TerraiOS.TerraMETData?
  public var heart_rate_data: TerraiOS.TerraHeartRateData?
  public var active_durations_data: TerraiOS.TerraActiveDurationsData?
  public var device_data: TerraiOS.TerraDeviceData?
  public var distance_data: TerraiOS.TerraDistanceSummaryData?
  public var calories_data: TerraiOS.TerraCaloriesData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraOxygenData : Swift.Decodable {
  public init(saturation_percentage: Swift.Double? = nil, max_volume_ml_per_min_per_kg: Swift.Double? = nil, saturation_samples: [TerraiOS.OxygenSaturationSample]? = [OxygenSaturationSample](), vo2_samples: [TerraiOS.Vo2Sample]? = [Vo2Sample]())
  public var saturation_percentage: Swift.Double?
  public var max_volume_ml_per_min_per_kg: Swift.Double?
  public var saturation_samples: [TerraiOS.OxygenSaturationSample]?
  public var vo2_samples: [TerraiOS.Vo2Sample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraGlucoseData : Swift.Codable {
  public init(day_avg_blood_glucose_mg_per_dL: Swift.Double? = nil, blood_glucose_samples: [TerraiOS.GlucoseDataSample]? = [GlucoseDataSample](), detailed_blood_glucose_samples: [TerraiOS.GlucoseDataSample]? = [GlucoseDataSample]())
  public var day_avg_blood_glucose_mg_per_dL: Swift.Double?
  public var blood_glucose_samples: [TerraiOS.GlucoseDataSample]?
  public var detailed_blood_glucose_samples: [TerraiOS.GlucoseDataSample]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraBodyMetaData : Swift.Decodable {
  public init(start_time: Swift.String? = nil, end_time: Swift.String? = nil)
  public var start_time: Swift.String?
  public var end_time: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraBodyHeartData : Swift.Decodable {
  public init(pulse_wave_velocity_samples: [TerraiOS.PulseVelocitySample]? = [PulseVelocitySample](), heart_rate_data: TerraiOS.TerraHeartRateData? = TerraHeartRateData(), afib_classifications: [TerraiOS.AFibClassificationSample]? = [AFibClassificationSample]())
  public var pulse_wave_velocity_samples: [TerraiOS.PulseVelocitySample]?
  public var heart_rate_data: TerraiOS.TerraHeartRateData?
  public var afib_classifications: [TerraiOS.AFibClassificationSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraBloodPressureData : Swift.Decodable {
  public init(blood_pressure_samples: [TerraiOS.BloodPressureSample]? = [BloodPressureSample]())
  public var blood_pressure_samples: [TerraiOS.BloodPressureSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraHydrationData : Swift.Decodable {
  public init(hydration_amount_samples: [TerraiOS.HydrationMeasurementSample]? = [HydrationMeasurementSample](), day_total_water_consumption_ml: Swift.Double? = nil)
  public var hydration_amount_samples: [TerraiOS.HydrationMeasurementSample]?
  public var day_total_water_consumption_ml: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraTemperatureData : Swift.Decodable {
  public init(ambient_temperature_samples: [TerraiOS.TemperatureSample]? = [TemperatureSample](), skin_temperature_samples: [TerraiOS.TemperatureSample]? = [TemperatureSample](), body_temperature_samples: [TerraiOS.TemperatureSample]? = [TemperatureSample]())
  public var ambient_temperature_samples: [TerraiOS.TemperatureSample]?
  public var skin_temperature_samples: [TerraiOS.TemperatureSample]?
  public var body_temperature_samples: [TerraiOS.TemperatureSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMeasurementData : Swift.Decodable {
  public init(measurements: [TerraiOS.MeasurementDataSample]? = [MeasurementDataSample]())
  public var measurements: [TerraiOS.MeasurementDataSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraBodyData : Swift.Decodable {
  public init(metadata: TerraiOS.TerraBodyMetaData? = TerraBodyMetaData(), oxygen_data: TerraiOS.TerraOxygenData? = TerraOxygenData(), glucose_data: TerraiOS.TerraGlucoseData? = TerraGlucoseData(), heart_data: TerraiOS.TerraBodyHeartData? = TerraBodyHeartData(), blood_pressure_data: TerraiOS.TerraBloodPressureData? = TerraBloodPressureData(), hydration_data: TerraiOS.TerraHydrationData? = TerraHydrationData(), temperature_data: TerraiOS.TerraTemperatureData? = TerraTemperatureData(), measurements_data: TerraiOS.TerraMeasurementData? = TerraMeasurementData())
  public var metadata: TerraiOS.TerraBodyMetaData?
  public var oxygen_data: TerraiOS.TerraOxygenData?
  public var glucose_data: TerraiOS.TerraGlucoseData?
  public var heart_data: TerraiOS.TerraBodyHeartData?
  public var blood_pressure_data: TerraiOS.TerraBloodPressureData?
  public var hydration_data: TerraiOS.TerraHydrationData?
  public var temperature_data: TerraiOS.TerraTemperatureData?
  public var measurements_data: TerraiOS.TerraMeasurementData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraEnergyData : Swift.Decodable {
  public var energy_kilojoules: Swift.Double?
  public var energy_planned_kilojoules: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraLapData : Swift.Decodable {
  public var laps: [TerraiOS.LapSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraStrainData : Swift.Decodable {
  public var strain_level: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraPowerData : Swift.Decodable {
  public var avg_watts: Swift.Double?
  public var power_samples: [TerraiOS.PowerSample]?
  public var max_watts: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraPolyLineMapData : Swift.Decodable {
  public var summary_polyline: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMovementData : Swift.Decodable {
  public var normalized_speed_meters_per_second: Swift.Double?
  public var avg_torque_newton_meters: Swift.Double?
  public var avg_pace_minutes_per_kilometer: Swift.Double?
  public var max_pace_minutes_per_kilometer: Swift.Double?
  public var max_speed_meters_per_second: Swift.Double?
  public var avg_cadence_rpm: Swift.Double?
  public var max_cadence_rpm: Swift.Double?
  public var avg_velocity_meters_per_second: Swift.Double?
  public var max_torque_newton_meters: Swift.Double?
  public var avg_speed_meters_per_second: Swift.Double?
  public var max_velocity_meters_per_second: Swift.Double?
  public var cadence_samples: [TerraiOS.CadenceSample]
  public var speed_samples: [TerraiOS.SpeedSample]
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraActivityMetaData : Swift.Decodable {
  public var city: Swift.String?
  public var type: Swift.Int?
  public var end_time: Swift.String?
  public var start_time: Swift.String?
  public var country: Swift.String?
  public var name: Swift.String?
  public var summary_id: Swift.String?
  public var upload_type: Swift.Int?
  public var state: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraTSSData : Swift.Decodable {
  public var samples: [TerraiOS.TSSSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraWorkData : Swift.Decodable {
  public var work_in_kilojoules: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDistanceDetailedData : Swift.Decodable {
  public var elevation_samples: [TerraiOS.ElevationSample]?
  public var distance_samples: [TerraiOS.DistanceSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDistanceData : Swift.Decodable {
  public var summary: TerraiOS.TerraDistanceSummaryData?
  public var detailed: TerraiOS.TerraDistanceDetailedData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraPositionData : Swift.Decodable {
  public var start_pos_lat_lng: [Swift.Double]?
  public var position_samples: [TerraiOS.PositionSample]?
  public var centre_pos_lat_lng: [Swift.Double]?
  public var end_pos_lat_lng: [Swift.Double]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraActivityData : Swift.Decodable {
  public var energy_data: TerraiOS.TerraEnergyData?
  public var oxygen_data: TerraiOS.TerraOxygenData?
  public var MET_data: TerraiOS.TerraMETData?
  public var strain_data: TerraiOS.TerraStrainData?
  public var power_data: TerraiOS.TerraPowerData?
  public var polyline_map_data: TerraiOS.TerraPolyLineMapData?
  public var heart_rate_data: TerraiOS.TerraHeartRateData?
  public var active_durations_data: TerraiOS.TerraActiveDurationsData?
  public var lap_data: TerraiOS.TerraLapData?
  public var moevement_data: TerraiOS.TerraMovementData?
  public var metadata: TerraiOS.TerraActivityMetaData?
  public var TSS_data: TerraiOS.TerraTSSData?
  public var device_data: TerraiOS.TerraDeviceData?
  public var work_data: TerraiOS.TerraWorkData?
  public var distance_data: TerraiOS.TerraDistanceData?
  public var calories_data: TerraiOS.TerraCaloriesData?
  public var position_data: TerraiOS.TerraPositionData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraBreathsData : Swift.Decodable {
  public var samples: [TerraiOS.BreathSample]?
  public var end_time: Swift.String?
  public var start_time: Swift.String?
  public var max_breaths_per_min: Swift.Double?
  public var min_breaths_per_min: Swift.Double?
  public var avg_breaths_per_min: Swift.Double?
  public var on_demand_reading: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraOxygenSaturationData : Swift.Decodable {
  public var samples: [TerraiOS.SPO2Sample]?
  public var end_time: Swift.String?
  public var start_time: Swift.String?
  public var on_demand_reading: Swift.Bool?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraSnoringData : Swift.Decodable {
  public var num_snoring_events: Swift.Int?
  public var samples: [TerraiOS.SnoringSample]?
  public var end_time: Swift.String?
  public var start_time: Swift.String?
  public var total_snoring_duration: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraRespirationData : Swift.Decodable {
  public var breaths_data: TerraiOS.TerraBreathsData?
  public var oxygen_saturation_data: TerraiOS.TerraOxygenSaturationData?
  public var snoring_data: TerraiOS.TerraSnoringData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraSleepMetaData : Swift.Decodable {
  public var sleep_efficiency: Swift.Double?
  public var end_time: Swift.String?
  public var start_time: Swift.String?
  public var sleep_duration_planned: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraAwakeDurationData : Swift.Decodable {
  public var num_out_of_bed_events: Swift.Int?
  public var num_wakeup_events: Swift.Int?
  public var duration_after_wakeup_seconds: Swift.Double?
  public var waso: Swift.Double?
  public var duration_before_sleeping_seconds: Swift.Double?
  public var duration_long_interruption_seconds: Swift.Double?
  public var duration_awake_state_seconds: Swift.Double?
  public var duration_short_interruption_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraOtherDurationData : Swift.Decodable {
  public var duration_unmeasurable_sleep_seconds: Swift.Double?
  public var duration_in_bed_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraAsleepDurationData : Swift.Decodable {
  public var duration_deep_sleep_state_seconds: Swift.Double?
  public var duration_REM_sleep_state_seconds: Swift.Double?
  public var duration_asleep_state_seconds: Swift.Double?
  public var num_REM_events: Swift.Int?
  public var duration_light_sleep_state_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraSleepDurationData : Swift.Decodable {
  public var awake: TerraiOS.TerraAwakeDurationData?
  public var other: TerraiOS.TerraOtherDurationData?
  public var asleep: TerraiOS.TerraAsleepDurationData?
  public var hypnogram_samples: [TerraiOS.HypnogramSample]?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraTemperatureSleepData : Swift.Decodable {
  public var delta: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraSleepData : Swift.Decodable {
  public var metadata: TerraiOS.TerraSleepMetaData?
  public var sleep_durations_data: TerraiOS.TerraSleepDurationData?
  public var temperature_data: TerraiOS.TerraTemperatureData?
  public var respiration_data: TerraiOS.TerraRespirationData?
  public var heart_rate_data: TerraiOS.TerraHeartRateData?
  public init(from decoder: Swift.Decoder) throws
}
public func connectTerra(devId: Swift.String, token: Swift.String, referenceId: Swift.String? = nil, resource: Swift.String) -> TerraiOS.TerraAuthResponse?
public enum Connections {
  case FREESTYLE_LIBRE
  case APPLE_HEALTH
  public static func == (a: TerraiOS.Connections, b: TerraiOS.Connections) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum Permissions {
  case DAILY, BODY, SLEEP, ACTIVITY, ATHLETE, NUTRITION, SAMPLES
  public static func == (a: TerraiOS.Permissions, b: TerraiOS.Permissions) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct authenticateUserPayload : Swift.Decodable {
  public var status: Swift.String?
  public var auth_url: Swift.String?
  public var user_id: Swift.String?
  public var message: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct deauthenticateUserPayload : Swift.Decodable {
  public var status: Swift.String?
  public var message: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public class TerraAuthClient {
  public init(devId: Swift.String, xAPIKey: Swift.String)
  public func authenticateUser(resource: Swift.String) -> TerraiOS.authenticateUserPayload?
  public func deauthenticateUser(user_id: Swift.String) -> TerraiOS.deauthenticateUserPayload?
  @objc deinit
}
public struct TerraAuthResponse : Swift.Decodable {
  public var status: Swift.String
  public var user_id: Swift.String?
  public var reference_id: Swift.String?
  public var message: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public func disconnectTerra(dev_id: Swift.String, xAPIKey: Swift.String, user_id: Swift.String)
public class AppleHealth {
  final public let user_id: Swift.String?
  @available(iOS 10.0, *)
  public init(dev_id: Swift.String, user_id: Swift.String? = nil, auto: Swift.Bool = true, bodyTimer: Swift.Double = 60*60*8, dailyTimer: Swift.Double = 60*60*8, nutritionTimer: Swift.Double = 60*60*8, sleepTimer: Swift.Double = 60*60*8, readTypes: Swift.Set<HealthKit.HKObjectType> = Set([HKObjectType.workoutType(),
                                                     HKObjectType.activitySummaryType(),
                                                     HKObjectType.quantityType(forIdentifier:.activeEnergyBurned)!,
                                                     HKQuantityType.quantityType(forIdentifier: .stepCount)!,
                                                     HKObjectType.quantityType(forIdentifier: .heartRate)!,
                                                     HKObjectType.quantityType(forIdentifier: .heartRateVariabilitySDNN)!,
                                                     HKObjectType.quantityType(forIdentifier: .vo2Max)!,
                                                     HKObjectType.quantityType(forIdentifier: .height)!,
                                                     HKObjectType.quantityType(forIdentifier: .appleExerciseTime)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyMass)!,
                                                     HKObjectType.quantityType(forIdentifier: .flightsClimbed)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyMassIndex)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyFatPercentage)!,
                                                     HKObjectType.quantityType(forIdentifier: .distanceSwimming)!,
                                                     HKObjectType.quantityType(forIdentifier: .distanceCycling)!,
                                                     HKObjectType.quantityType(forIdentifier: .distanceWalkingRunning)!,
                                                     HKObjectType.characteristicType(forIdentifier: .biologicalSex)!,
                                                     HKObjectType.characteristicType(forIdentifier: .dateOfBirth)!,
                                                     HKObjectType.quantityType(forIdentifier: .basalEnergyBurned)!,
                                                     HKObjectType.quantityType(forIdentifier: .swimmingStrokeCount)!,
                                                     HKObjectType.quantityType(forIdentifier: .restingHeartRate)!,
                                                     HKObjectType.quantityType(forIdentifier: .bloodPressureDiastolic)!,
                                                     HKObjectType.quantityType(forIdentifier: .bloodPressureSystolic)!,
                                                     HKObjectType.quantityType(forIdentifier: .bodyTemperature)!,
                                                     HKObjectType.quantityType(forIdentifier: .leanBodyMass)!,
                                                     HKObjectType.quantityType(forIdentifier: .oxygenSaturation)!,
                                                     HKObjectType.categoryType(forIdentifier: .sleepAnalysis)!,
                                                     HKObjectType.quantityType(forIdentifier: .respiratoryRate)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietarySodium)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryProtein)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryCarbohydrates)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryFiber)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryCholesterol)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryFatTotal)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietarySugar)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryVitaminC)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryVitaminA)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryEnergyConsumed)!,
                                                     HKObjectType.quantityType(forIdentifier: .dietaryWater)!,
                                                     HKObjectType.quantityType(forIdentifier: .bloodGlucose)!,
                                                     HKObjectType.categoryType(forIdentifier: .mindfulSession)!,
                                                     HKSeriesType.workoutRoute()
                                                    ]), shareType: Swift.Set<HealthKit.HKSampleType> = Set([]), completion: @escaping (Swift.Bool) -> Swift.Void = {(success) -> Void in }) throws
  public func postNutrition(_ payload: TerraiOS.TerraNutritionData, completion: @escaping (Swift.Bool) -> Swift.Void = {(success) -> Void in})
  public func postBody(_ payload: TerraiOS.TerraBodyData, completion: @escaping (Swift.Bool) -> Swift.Void = {(success) -> Void in})
  public func getAthlete(completion: @escaping (Swift.Bool, TerraiOS.TerraAthleteData?) -> Swift.Void = {(success, _) -> Void in})
  public func getDaily(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraDailyData]?) -> Swift.Void = {(success, _) -> Void in})
  public func getBody(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraBodyData]) -> Swift.Void = {(success, _) -> Void in})
  public func getSleep(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraSleepData]) -> Swift.Void = {(success, _) -> Void in})
  public func getNutrition(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraNutritionData]) -> Swift.Void = {(success, _) -> Void in})
  public func getWorkout(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), completion: @escaping (Swift.Bool, [TerraiOS.TerraActivityData]) -> Swift.Void = {(success, _) -> Void in})
  @objc deinit
}
public struct Reading {
  public let log: Swift.String
  public let sensorData: TerraiOS.SensorData?
}
extension Foundation.Date {
  public static func mondayAt12AM() -> Foundation.Date
  public static func todayAt12AM(date: Foundation.Date) -> Foundation.Date
  public static func convertToUTC(dateToConvert: Foundation.Date) -> Foundation.Date
}
extension Foundation.Date : Swift.Strideable {
  public func distance(to other: Foundation.Date) -> Foundation.TimeInterval
  public func advanced(by n: Foundation.TimeInterval) -> Foundation.Date
}
extension Swift.Optional {
  public var optional: Wrapped? {
    get
  }
}
extension Foundation.Date {
  public func isBetween(_ date1: Foundation.Date, and date2: Foundation.Date) -> Swift.Bool
  public func rounded(on amount: Swift.Int, _ component: Foundation.Calendar.Component) -> Foundation.Date
  public func floorAllComponents(before component: Foundation.Calendar.Component) -> Foundation.Date
  public static var LocaleWantsAMPM: Swift.Bool {
    get
  }
  public func toMillisecondsAsInt64() -> Swift.Int64
}
public struct TerraMenstruationDetails : Swift.Decodable {
  public var period_start_date: Swift.String?
  public var day_in_cycle: Swift.Double?
  public var period_length_in_days: Swift.Double?
  public var current_phase: Swift.Double?
  public var length_of_current_phase_in_day: Swift.Double?
  public var days_until_next_phase: Swift.Double?
  public var predicted_cycle_length_in_days: Swift.Double?
  public var is_predicted_cycle: Swift.String?
  public var cycle_length_in_days: Swift.Double?
  public var last_updated_time: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMenstruationMetadata : Swift.Decodable {
  public var start_time: Swift.String?
  public var end_time: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMenstruationData : Swift.Decodable {
  public var metadata: TerraiOS.TerraMenstruationMetadata?
  public var menstruation_data: TerraiOS.TerraMenstruationDetails?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMacrosModel : Swift.Decodable {
  public init(sodium_mg: Swift.Double? = nil, protein_g: Swift.Double? = nil, carbohydrates_g: Swift.Double? = nil, fiber_g: Swift.Double? = nil, cholesterol_mg: Swift.Double? = nil, fat_g: Swift.Double? = nil, sugar_g: Swift.Double? = nil, calories: Swift.Double? = nil, alcohol_g: Swift.Double? = nil)
  public var sodium_mg: Swift.Double?
  public var protein_g: Swift.Double?
  public var carbohydrates_g: Swift.Double?
  public var fiber_g: Swift.Double?
  public var cholesterol_mg: Swift.Double?
  public var fat_g: Swift.Double?
  public var sugar_g: Swift.Double?
  public var calories: Swift.Double?
  public var alcohol_g: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMicrosModel : Swift.Decodable {
  public init(biotin_mg: Swift.Double? = nil, caffeine_mg: Swift.Double? = nil, chloride_mg: Swift.Double? = nil, chromium_mg: Swift.Double? = nil, copper_mg: Swift.Double? = nil, calcium_mg: Swift.Double? = nil, folate_mg: Swift.Double? = nil, folic_acid_mg: Swift.Double? = nil, iodine_mg: Swift.Double? = nil, iron_mg: Swift.Double? = nil, magnesium_mg: Swift.Double? = nil, manganese_mg: Swift.Double? = nil, molybdenum_mg: Swift.Double? = nil, niacin_mg: Swift.Double? = nil, pantothenic_acid_mg: Swift.Double? = nil, phosphorus_mg: Swift.Double? = nil, potassium_mg: Swift.Double? = nil, riboflavin_mg: Swift.Double? = nil, selenium_mg: Swift.Double? = nil, thiamin_mg: Swift.Double? = nil, vitamin_A_mg: Swift.Double? = nil, vitamin_B12_mg: Swift.Double? = nil, vitamin_B6_mg: Swift.Double? = nil, vitamin_C_mg: Swift.Double? = nil, vitamin_D_mg: Swift.Double? = nil, vitamin_E_mg: Swift.Double? = nil, vitamin_K_mg: Swift.Double? = nil, zinc_mg: Swift.Double? = nil, saturated_fat_g: Swift.Double? = nil, monounsaturated_fat_g: Swift.Double? = nil, polyunsaturated_fat_g: Swift.Double? = nil)
  public var biotin_mg: Swift.Double?
  public var caffeine_mg: Swift.Double?
  public var chloride_mg: Swift.Double?
  public var chromium_mg: Swift.Double?
  public var copper_mg: Swift.Double?
  public var calcium_mg: Swift.Double?
  public var folate_mg: Swift.Double?
  public var folic_acid_mg: Swift.Double?
  public var iodine_mg: Swift.Double?
  public var iron_mg: Swift.Double?
  public var magnesium_mg: Swift.Double?
  public var manganese_mg: Swift.Double?
  public var molybdenum_mg: Swift.Double?
  public var monounsaturated_fat_g: Swift.Double?
  public var niacin_mg: Swift.Double?
  public var pantothenic_acid_mg: Swift.Double?
  public var phosphorus_mg: Swift.Double?
  public var potassium_mg: Swift.Double?
  public var polyunsaturated_fat_g: Swift.Double?
  public var riboflavin_mg: Swift.Double?
  public var saturated_fat_g: Swift.Double?
  public var selenium_mg: Swift.Double?
  public var thiamin_mg: Swift.Double?
  public var vitamin_A_mg: Swift.Double?
  public var vitamin_B12_mg: Swift.Double?
  public var vitamin_B6_mg: Swift.Double?
  public var vitamin_C_mg: Swift.Double?
  public var vitamin_D_mg: Swift.Double?
  public var vitamin_E_mg: Swift.Double?
  public var vitamin_K_mg: Swift.Double?
  public var zinc_mg: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraQuantityModel : Swift.Decodable {
  public init(unit: Swift.Int? = nil, amount: Swift.Double? = nil)
  public var unit: Swift.Int?
  public var amount: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMealData : Swift.Decodable {
  public init(quantity: TerraiOS.TerraQuantityModel? = TerraQuantityModel(), name: Swift.String? = nil, macros: TerraiOS.TerraMacrosModel? = TerraMacrosModel(), micros: TerraiOS.TerraMicrosModel? = TerraMicrosModel())
  public var quantity: TerraiOS.TerraQuantityModel?
  public var name: Swift.String?
  public var macros: TerraiOS.TerraMacrosModel?
  public var micros: TerraiOS.TerraMicrosModel?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraNutritonMetaData : Swift.Decodable {
  public init(start_time: Swift.String? = nil, end_time: Swift.String? = nil)
  public var start_time: Swift.String?
  public var end_time: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraNutritonSummary : Swift.Decodable {
  public init(macros: TerraiOS.TerraMacrosModel? = TerraMacrosModel(), micros: TerraiOS.TerraMicrosModel? = TerraMicrosModel(), water_ml: Swift.Double? = nil)
  public var macros: TerraiOS.TerraMacrosModel?
  public var micros: TerraiOS.TerraMicrosModel?
  public var water_ml: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraNutritionData : Swift.Decodable {
  public init(meals: [TerraiOS.TerraMealData]? = [TerraMealData](), summary: TerraiOS.TerraNutritonSummary? = TerraNutritonSummary(), metadata: TerraiOS.TerraNutritonMetaData? = TerraNutritonMetaData())
  public var meals: [TerraiOS.TerraMealData]?
  public var summary: TerraiOS.TerraNutritonSummary?
  public var metadata: TerraiOS.TerraNutritonMetaData?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraUserModel : Swift.Decodable {
  public var last_webhook_update: Swift.String?
  public var provider: Swift.String?
  public var user_id: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraBodyDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraBodyData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraAthleteDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraAthleteData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraActivityDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraActivityData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraSleepDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraSleepData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraDailyDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraDailyData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraMenstruationDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraMenstruationData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TerraNutritionDataPayloadModel : Swift.Decodable {
  public var user: TerraiOS.TerraUserModel
  public var data: [TerraiOS.TerraNutritionData]?
  public var message: Swift.String?
  public var reference: Swift.String?
  public var type: Swift.String?
  public var status: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public class TerraClient {
  public init(userId: Swift.String, devId: Swift.String, xAPIKey: Swift.String)
  public func getActivity(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), toWebhook: Swift.Bool = true) -> TerraiOS.TerraActivityDataPayloadModel?
  public func getActivity(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraActivityDataPayloadModel?
  public func getDaily(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), toWebhook: Swift.Bool = true) -> TerraiOS.TerraDailyDataPayloadModel?
  public func getDaily(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraDailyDataPayloadModel?
  public func getBody(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), toWebhook: Swift.Bool = true) -> TerraiOS.TerraBodyDataPayloadModel?
  public func getBody(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraBodyDataPayloadModel?
  public func getAthlete(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraAthleteDataPayloadModel?
  public func getMenstruation(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), toWebhook: Swift.Bool = true) -> TerraiOS.TerraMenstruationDataPayloadModel?
  public func getMenstruation(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraMenstruationDataPayloadModel?
  public func getSleep(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), toWebhook: Swift.Bool = true) -> TerraiOS.TerraSleepDataPayloadModel?
  public func getSleep(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraSleepDataPayloadModel?
  public func getNutrition(startDate: Foundation.Date = Date.todayAt12AM(date: Date()), endDate: Foundation.Date = Date(), toWebhook: Swift.Bool = true) -> TerraiOS.TerraNutritionDataPayloadModel?
  public func getNutrition(startDate: Foundation.TimeInterval = Date.todayAt12AM(date: Date()).timeIntervalSince1970, endDate: Foundation.TimeInterval = Date().timeIntervalSince1970, toWebhook: Swift.Bool = true) -> TerraiOS.TerraNutritionDataPayloadModel?
  @objc deinit
}
@_hasMissingDesignatedInitializers @available(iOS 13.0, macOS 10.15, tvOS 13.0, watchOS 6.0, *)
public class LibreToolsViewModel : Combine.ObservableObject {
  public func activate(completion: @escaping (Swift.Bool) -> Swift.Void)
  public func readHistory(completion: @escaping (TerraiOS.SensorData?) -> Swift.Void)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public func appleHealthScheduler(task: BackgroundTasks.BGProcessingTask)
public struct TerraAthleteData : Swift.Decodable {
  public var first_name: Swift.String?
  public var last_name: Swift.String?
  public var gender: Swift.String?
  public var sex: Swift.String?
  public var date_of_birth: Swift.String?
  public var bio: Swift.String?
  public var email: Swift.String?
  public var city: Swift.String?
  public var state: Swift.String?
  public var country: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct ActivityLevelSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var activity_level: Swift.Int
  public init(from decoder: Swift.Decoder) throws
}
public struct BreathSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var breaths_per_min: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct CadenceSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var cadence_rpm: Swift.Double
  public var timer_duration_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct SpeedSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var speed_meters_per_seconds: Swift.Double?
  public var timer_duration_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct LapSample : Swift.Decodable {
  public var start_time: Swift.String
  public var distance_meters: Swift.Double?
  public var calories: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct DistanceSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var distance_meters: Swift.Double
  public var timer_duration_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct ElevationSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var elev_meters: Swift.Double
  public var timer_duration_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct GlucoseDataSample : Swift.Codable {
  public init(timestamp: Swift.String, blood_glucose_mg_per_dL: Swift.Double, glucose_level_flag: Swift.Int? = nil, trend_array: Swift.Int? = nil)
  public var timestamp: Swift.String
  public var blood_glucose_mg_per_dL: Swift.Double
  public var glucose_level_flag: Swift.Int?
  public var trend_array: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct HeartRateSample : Swift.Decodable {
  public init(timestamp: Swift.String, bpm: Swift.Double)
  public var timestamp: Swift.String
  public var bpm: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct HeartRatesVariabilitySampleSDNN : Swift.Decodable {
  public init(hrv_sdnn: Swift.Double, timestamp: Swift.String)
  public var hrv_sdnn: Swift.Double
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct HeartRatesVariabilitySampleRMSSD : Swift.Decodable {
  public var hrv_rmssd: Swift.Double
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct HypnogramSample : Swift.Decodable {
  public var level: Swift.Int
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct METSample : Swift.Decodable {
  public var level: Swift.Double
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct OxygenSaturationSample : Swift.Decodable {
  public init(percentage: Swift.Double, timestamp: Swift.String)
  public var percentage: Swift.Double
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct PositionSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var coords_lat_lng_deg: [Swift.Double]
  public var timer_duration_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct PowerSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var watts: Swift.Double
  public var timer_duration_seconds: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct SPO2Sample : Swift.Decodable {
  public init(timestamp: Swift.String, percentage: Swift.Double)
  public var timestamp: Swift.String
  public var percentage: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct SnoringSample : Swift.Decodable {
  public var duration: Swift.Double
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct StressSample : Swift.Decodable {
  public var level: Swift.Int
  public var timestamp: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct TSSSample : Swift.Decodable {
  public var intensity_factor_planned: Swift.Double?
  public var intensity_factor_actual: Swift.Double?
  public var method: Swift.String?
  public var planned: Swift.Double?
  public var actual: Swift.Double?
  public var normalized_power_watts: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct OtherDeviceData : Swift.Decodable {
  public init(software_version: Swift.String? = nil, manufacturer: Swift.String? = nil, serial_number: Swift.String? = nil, name: Swift.String? = nil, hardware_version: Swift.String? = nil)
  public var software_version: Swift.String?
  public var manufacturer: Swift.String?
  public var serial_number: Swift.String?
  public var name: Swift.String?
  public var hardware_version: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct BloodPressureSample : Swift.Decodable {
  public init(timestamp: Swift.String, diastolic_bp: Swift.Double, systolic_bp: Swift.Double)
  public var timestamp: Swift.String
  public var diastolic_bp: Swift.Double
  public var systolic_bp: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct MeasurementDataSample : Swift.Decodable {
  public init(measurement_time: Swift.String? = nil, fat_percentage: Swift.Double? = nil, BMI: Swift.Double? = nil, muscle_mass_g: Swift.Double? = nil, skin_fold_mm: Swift.Double? = nil, BMR: Swift.Double? = nil, height_cm: Swift.Double? = nil, estimated_fitness_age: Swift.Double? = nil, bone_mass_g: Swift.Double? = nil, water_percentage: Swift.Double? = nil, RMR: Swift.Double? = nil, weight_kg: Swift.Double? = nil, lean_mass_g: Swift.Double? = nil, insulin_units: Swift.Double? = nil, insulin_type: Swift.Double? = nil, urine_color: Swift.Double? = nil)
  public var measurement_time: Swift.String?
  public var fat_percentage: Swift.Double?
  public var BMI: Swift.Double?
  public var muscle_mass_g: Swift.Double?
  public var skin_fold_mm: Swift.Double?
  public var BMR: Swift.Double?
  public var height_cm: Swift.Double?
  public var estimated_fitness_age: Swift.Double?
  public var bone_mass_g: Swift.Double?
  public var water_percentage: Swift.Double?
  public var RMR: Swift.Double?
  public var weight_kg: Swift.Double?
  public var lean_mass_g: Swift.Double?
  public var insulin_units: Swift.Double?
  public var insulin_type: Swift.Double?
  public var urine_color: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct BodyTemperatureSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var body_temperature_celsius: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct SkinTemperatureSample : Swift.Decodable {
  public var timestamp: Swift.String
  public var skin_temperature_celsius: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct TemperatureSample : Swift.Decodable {
  public init(timestamp: Swift.String, temperature_celsius: Swift.Double)
  public var timestamp: Swift.String
  public var temperature_celsius: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct HydrationLevelSample : Swift.Decodable {
  public init(timestamp: Swift.String, hydration_level: Swift.Double)
  public var timestamp: Swift.String
  public var hydration_level: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct HydrationMeasurementSample : Swift.Decodable {
  public init(timestamp: Swift.String, hydration_kg: Swift.Double)
  public var timestamp: Swift.String
  public var hydration_kg: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct Vo2MaxSample : Swift.Decodable {
  public init(timestamp: Swift.String, max_volume_ml_per_min_per_kg: Swift.Double)
  public var timestamp: Swift.String
  public var max_volume_ml_per_min_per_kg: Swift.Double
  public init(from decoder: Swift.Decoder) throws
}
public struct PulseVelocitySample : Swift.Decodable {
  public init(timestamp: Swift.String? = nil, pulse_wave_velocity_meters_per_second: Swift.Double? = nil)
  public var timestamp: Swift.String?
  public var pulse_wave_velocity_meters_per_second: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct AFibClassificationSample : Swift.Decodable {
  public init(timestamp: Swift.String? = nil, afib_classification: Swift.Int? = nil)
  public var timestamp: Swift.String?
  public var afib_classification: Swift.Int?
  public init(from decoder: Swift.Decoder) throws
}
public struct Vo2Sample : Swift.Decodable {
  public init(timestamp: Swift.String? = nil, max_volume_ml_per_min_per_kg: Swift.Double? = nil)
  public var timestamp: Swift.String?
  public var max_volume_ml_per_min_per_kg: Swift.Double?
  public init(from decoder: Swift.Decoder) throws
}
public struct SensorData {
  public var patchUid: Swift.String?
  public init?(uuid: Foundation.Data, bytes: [Swift.UInt8], date: Foundation.Date = Date(), patchInfo: Swift.String?)
}
extension TerraiOS.SensorData {
  public var history: [Swift.UInt8] {
    get
  }
  public var trend: [Swift.UInt8] {
    get
  }
  public var ageSeconds: Swift.Int {
    get
  }
  public var type: Swift.String {
    get
  }
  public var glucoseHistory: [Swift.UInt16] {
    get
  }
  public var glucoseTrend: [Swift.UInt16] {
    get
  }
  public func rawGlucose(_ record: Swift.UInt16) -> Swift.UInt16
}
extension TerraiOS.LibreSensorState : Swift.Equatable {}
extension TerraiOS.LibreSensorState : Swift.Hashable {}
extension TerraiOS.Connections : Swift.Equatable {}
extension TerraiOS.Connections : Swift.Hashable {}
extension TerraiOS.Permissions : Swift.Equatable {}
extension TerraiOS.Permissions : Swift.Hashable {}
